00000000: JMP main

; [0x233] CASE 0
; if reg(r10) != reg(r11):
;   if r12 and not stop:
;     correct = r12
;   stop = 1
00000004: MOV ACC, r10
00000005: CALL getmem ;(ACC loc)
00000007: XCHG ACC, r0
00000008: XCHG ACC, r10

00000009: MOV ACC, r11
0000000a: CALL getmem ;(ACC loc)
0000000c: XCHG ACC, r0
0000000d: XCHG ACC, r11

0000000e: MOV ACC, r10
0000000f: SUB ACC, r11
00000010: JZ loc_25 ; r10 == r11
00000012: MOV ACC, r12
00000013: JZ loc_20 ; !r12

00000015: MOV r0:1, 0x9e
00000017: MOV SRC, r0:1
00000018: MOV ACC, [BANK + SRC]
00000019: JNZ loc_20

; correct = r12
0000001b: MOV r0:1, 0x9d
0000001d: MOV SRC, r0:1
0000001e: MOV ACC, r12
0000001f: MOV [BANK + SRC], ACC

; done = 1
00000020: MOV r0:1, 0x9e
00000022: MOV SRC, r0:1
00000023: MOV ACC, 1
00000024: MOV [BANK + SRC], ACC
00000025: JMP main_loop

; [0x233] CASE 1
; rol REG(r10), r11

; r6 = REG(r10)
00000027: MOV ACC, r10
00000028: CALL getmem ;(ACC loc)
0000002a: XCHG ACC, r0
0000002b: XCHG ACC, r6

0000002c: MOV ACC, r11
0000002d: XCHG ACC, r7

; r6 = ROL(r6, r7)
0000002e: CLC
0000002f: MOV ACC, r6
00000030: RAL ACC
00000031: XCHG ACC, r6
00000032: SETC ACC
00000033: ADD ACC, r6
00000034: XCHG ACC, r6
00000035: MOV ACC, r7
00000036: DEC ACC
00000037: XCHG ACC, r7
00000038: MOV ACC, r7
00000039: JNZ loc_2e

0000003b: MOV ACC, r6
0000003c: XCHG ACC, r0
0000003d: MOV ACC, r10
0000003e: XCHG ACC, r1
0000003f: CALL setmem ; (val, loc)
00000041: JMP main_loop

; [0x233] CASE 2
; mov REG(r10), ROM[r11]
00000043: MOV ACC, r11
00000044: MOV r0:1, 0
00000046: XCHG ACC, r1
00000047: MOV SRC, r0:1
00000048: MOV ACC, [BANK + SRC]
00000049: XCHG ACC, r0
0000004a: MOV ACC, r10
0000004b: XCHG ACC, r1
0000004c: CALL setmem ; (val, loc)
0000004e: JMP main_loop

; [0x233] CASE 3
; xor Reg(r10), r11
; r6 = r10
00000050: MOV ACC, r10
00000051: XCHG ACC, r6

; r10 = mem[r10]
00000052: MOV ACC, r10
00000053: CALL getmem ;(ACC loc)
00000055: XCHG ACC, r0
00000056: XCHG ACC, r10

00000057: MOV ACC, r10
00000058: XCHG ACC, r0
00000059: MOV ACC, r11
0000005a: XCHG ACC, r1
0000005b: CALL xor_op
0000005d: MOV ACC, r6
0000005e: XCHG ACC, r1
0000005f: CALL setmem ; (val, loc)
00000061: JMP main_loop

; [0x233] CASE 4
; mov [r10], Reg(r11)
00000063: MOV ACC, r11
00000064: CALL getmem ;(ACC loc)
00000066: XCHG ACC, r0
00000067: XCHG ACC, r11

00000068: MOV r0:1, 0
0000006a: MOV ACC, r10
0000006b: XCHG ACC, r1
0000006c: MOV SRC, r0:1
0000006d: MOV ACC, r11
0000006e: MOV [BANK + SRC], ACC
0000006f: JMP main_loop

; [0x233] CASE 5
; PC = 0
00000071: MOV r0:1, 0x9f
00000073: MOV SRC, r0:1
00000074: MOV acc, 0
00000075: MOV [BANK + SRC], acc
00000076: JMP loc_200

; [0x233] CASE 6
; SKIPNE r10, r11 
00000078: MOV ACC, r10
00000079: CALL getmem
0000007b: XCHG ACC, r0
0000007c: XCHG ACC, r10
0000007d: MOV ACC, r11
0000007e: CALL getmem
00000080: XCHG ACC, r0
00000081: XCHG ACC, r11

00000082: MOV ACC, r10
00000083: SUB ACC, r11
00000084: JZ loc_8c
00000086: MOV r0:1, 0x9f
00000088: MOV SRC, r0:1
00000089: MOV acc, [BANK + SRC]
0000008a: INC acc
0000008b: MOV [BANK + SRC], acc
0000008c: JMP loc_200



; [0x233] CASE 7
; add REG(r10), r11
0000008e: MOV ACC, r10
0000008f: CALL getmem ;(ACC loc)
00000091: MOV ACC, r0
00000092: ADD ACC, r11
00000093: XCHG ACC, r0
00000094: MOV ACC, r10
00000095: XCHG ACC, r1
00000096: CALL setmem ; (val, loc)
00000098: JMP main_loop

getmem: ; (ACC loc)
0000009a: MOV r0:1, 0xa0
0000009c: XCHG ACC, r1
0000009d: MOV SRC, r0:1
0000009e: MOV ACC, [BANK + SRC]
0000009f: XCHG ACC, r0
000000a0: RETVAL 0

setmem: ; (val, loc)
000000a1: MOV r2:3, 0xa0
000000a3: MOV ACC, r1
000000a4: XCHG ACC, r3
000000a5: MOV SRC, r2:3
000000a6: MOV ACC, r0
000000a7: MOV [BANK + SRC], ACC
000000a8: RETVAL 0

main: 
000000a9: MOV r0:1, local welcome
000000ab: CALL puts

000000ad: MOV ACC, 0
000000ae: MOV BANK, ACC
000000af: MOV r0:1, 0
000000b1: CALL loc_480
000000b3: MOV r0:1, 0
000000b5: CALL init_bank
000000b7: CALL read_bank

000000b9: MOV ACC, 1
000000ba: MOV BANK, ACC
000000bb: MOV r0:1, 32
000000bd: CALL loc_480
000000bf: MOV r0:1, 3
000000c1: CALL init_bank
000000c3: CALL read_bank

000000c5: MOV ACC, 2
000000c6: MOV BANK, ACC
000000c7: MOV r0:1, 64
000000c9: CALL loc_480
000000cb: MOV r0:1, 6
000000cd: CALL init_bank
000000cf: CALL read_bank

000000d1: MOV ACC, 3
000000d2: MOV BANK, ACC
000000d3: MOV r0:1, 96
000000d5: CALL loc_480
000000d7: MOV r0:1, 9
000000d9: CALL init_bank
000000db: CALL read_bank

000000dd: MOV ACC, 4
000000de: MOV BANK, ACC
000000df: MOV r0:1, 0
000000e1: CALL loc_580
000000e3: MOV r0:1, 0x10
000000e5: CALL init_bank
000000e7: CALL read_bank

000000e9: MOV ACC, 5
000000ea: MOV BANK, ACC
000000eb: MOV r0:1, 32
000000ed: CALL loc_580
000000ef: MOV r0:1, 0x13
000000f1: CALL init_bank
000000f3: CALL read_bank

000000f5: MOV ACC, 6
000000f6: MOV BANK, ACC
000000f7: MOV r0:1, 64
000000f9: CALL loc_580
000000fb: MOV r0:1, 0x16
000000fd: CALL init_bank
000000ff: CALL read_bank

00000101: MOV ACC, 7
00000102: MOV BANK, ACC
00000103: MOV r0:1, 96
00000105: CALL loc_580
00000107: MOV r0:1, 0x19
00000109: CALL init_bank
0000010b: CALL read_bank

0000010d: MOV ACC, 0
0000010e: MOV BANK, ACC
0000010f: JMP main_loop
...

main_loop:
00000200: CALL check_9e
00000202: JNZ loc_235
00000204: MOV ACC, r15
00000205: MOV BANK, ACC
00000206: INC r15
00000207: CLC
00000208: MOV r0:1, 0x9f
0000020a: MOV SRC, r0:1
0000020b: MOV ACC, [BANK + SRC]
0000020c: MOV r0:1, 0

; SRC = ACC << 2
0000020e: CLC
0000020f: RAL ACC
00000210: XCHG ACC, r1 
00000211: RAL ACC 
00000212: XCHG ACC, r0 
00000213: MOV ACC, r1
00000214: RAL ACC
00000215: XCHG ACC, r1
00000216: XCHG ACC, r0
00000217: RAL ACC
00000218: XCHG ACC, r0
00000219: MOV SRC, r0:1

; Load r12-9 = BANK[SRC]
0000021a: MOV ACC, [BANK + SRC]
0000021b: XCHG ACC, r9
0000021c: INC r1
0000021d: MOV SRC, r0:1
0000021e: MOV ACC, [BANK + SRC]
0000021f: XCHG ACC, r10
00000220: INC r1
00000221: MOV SRC, r0:1
00000222: MOV ACC, [BANK + SRC]
00000223: XCHG ACC, r11
00000224: INC r1
00000225: MOV SRC, r0:1
00000226: MOV ACC, [BANK + SRC]
00000227: XCHG ACC, r12

; Increment index
00000228: MOV r0:1, 0x9f
0000022a: MOV SRC, r0:1
0000022b: MOV ACC, [BANK + SRC]
0000022c: INC ACC
0000022d: MOV [BANK + SRC], ACC

; jmp JMP_TABLE[r9 * 2]
0000022e: MOV ACC, r9
0000022f: RAL ACC ; r9 < 1
00000230: MOV r0:1, 0
00000232: XCHG ACC, r1
00000233: JMP loc_810 ; JUMP TABLE

loc_235:
00000235: CALL check
00000237: JNZ loc_23f
00000239: MOV r0:1, local incorrect
0000023b: CALL puts
0000023d: JMP loc_245

loc_23f:
0000023f: MOV r0:1, local correct
00000241: CALL loc_739
00000243: JMP loc_245

00000245: JMP loc_245

check_9e:
00000300: MOV r2:3, 0x80
00000302: MOV ACC, r3
00000303: MOV BANK, ACC
00000304: MOV r0:1, 0x9e
00000306: MOV SRC, r0:1
00000307: MOV ACC, [BANK + SRC]
00000308: JNZ loc_30b
0000030a: RETVAL 0
0000030b: INC r3
0000030c: MOV ACC, r3
0000030d: SUB ACC, r2
0000030e: JNZ loc_302
00000310: RETVAL 1

check: 
00000311: MOV r2:3, 0x80
00000313: MOV ACC, r3
00000314: MOV BANK, ACC
00000315: MOV r0:1, 0x9d
00000317: MOV SRC, r0:1
00000318: MOV ACC, [BANK + SRC]
00000319: JZ loc_31c
0000031b: RETVAL 0
0000031c: INC r3
0000031d: MOV ACC, r3
0000031e: SUB ACC, r2
0000031f: JNZ loc_313
00000321: RETVAL 1

00000480: MOV r2:3, 0
00000482: MOV r6:7, 0
00000484: MOV r4:5, [PC_HIGH + r0:1]
00000485: MOV SRC, r2:3
00000486: MOV ACC, r4
00000487: MOV [BANK + SRC], ACC
00000488: XCHG ACC, r3
00000489: INC ACC
0000048a: XCHG ACC, r3
0000048b: JNC loc_490
00000490: MOV SRC, r2:3
00000491: MOV ACC, r5
00000492: MOV [BANK + SRC], ACC
00000493: XCHG ACC, r3
00000494: INC ACC
00000495: XCHG ACC, r3
00000496: JNC loc_49b
00000498: XCHG ACC, r2
00000499: INC ACC
0000049a: XCHG ACC, r2
0000049b: XCHG ACC, r1
0000049c: INC ACC
0000049d: XCHG ACC, r1
0000049e: JNC loc_4a3
000004a0: XCHG ACC, r0
000004a1: INC ACC
000004a2: XCHG ACC, r0
000004a3: INC_JZ r6, loc_4a7
000004a5: JMP loc_484
000004a7: MOV r6:7, 0
000004a9: MOV r4:5, [PC_HIGH + r0:1]
000004aa: MOV SRC, r2:3
000004ab: MOV ACC, r4
000004ac: MOV [BANK + SRC], ACC
000004ad: XCHG ACC, r3
000004ae: INC ACC
000004af: XCHG ACC, r3
000004b0: JNC loc_4b5
000004b5: MOV SRC, r2:3
000004b6: MOV ACC, r5
000004b7: MOV [BANK + SRC], ACC
000004b8: XCHG ACC, r3
000004b9: INC ACC
000004ba: XCHG ACC, r3
000004bb: JNC loc_4c0
000004bd: XCHG ACC, r2
000004be: INC ACC
000004bf: XCHG ACC, r2
000004c0: XCHG ACC, r1
000004c1: INC ACC
000004c2: XCHG ACC, r1
000004c3: JNC loc_4c8
000004c5: XCHG ACC, r0
000004c6: INC ACC
000004c7: XCHG ACC, r0
000004c8: INC_JZ r6, loc_4cc
000004ca: JMP loc_4a9
000004cc: RETVAL 0

00000580: MOV r2:3, 0
00000582: MOV r6:7, 0
00000584: MOV r4:5, [PC_HIGH + r0:1]
00000585: MOV SRC, r2:3
00000586: MOV ACC, r4
00000587: MOV [BANK + SRC], ACC
00000588: XCHG ACC, r3
00000589: INC ACC
0000058a: XCHG ACC, r3
0000058b: JNC loc_590
00000590: MOV SRC, r2:3
00000591: MOV ACC, r5
00000592: MOV [BANK + SRC], ACC
00000593: XCHG ACC, r3
00000594: INC ACC
00000595: XCHG ACC, r3
00000596: JNC loc_59b
00000598: XCHG ACC, r2
00000599: INC ACC
0000059a: XCHG ACC, r2
0000059b: XCHG ACC, r1
0000059c: INC ACC
0000059d: XCHG ACC, r1
0000059e: JNC loc_5a3
000005a0: XCHG ACC, r0
000005a1: INC ACC
000005a2: XCHG ACC, r0
000005a3: INC_JZ r6, loc_5a7
000005a5: JMP loc_584
000005a7: MOV r6:7, 0
000005a9: MOV r4:5, [PC_HIGH + r0:1]
000005aa: MOV SRC, r2:3
000005ab: MOV ACC, r4
000005ac: MOV [BANK + SRC], ACC
000005ad: XCHG ACC, r3
000005ae: INC ACC
000005af: XCHG ACC, r3
000005b0: JNC loc_5b5
000005b5: MOV SRC, r2:3
000005b6: MOV ACC, r5
000005b7: MOV [BANK + SRC], ACC
000005b8: XCHG ACC, r3
000005b9: INC ACC
000005ba: XCHG ACC, r3
000005bb: JNC loc_5c0
000005bd: XCHG ACC, r2
000005be: INC ACC
000005bf: XCHG ACC, r2
000005c0: XCHG ACC, r1
000005c1: INC ACC
000005c2: XCHG ACC, r1
000005c3: JNC loc_5c8
000005c5: XCHG ACC, r0
000005c6: INC ACC
000005c7: XCHG ACC, r0
000005c8: INC_JZ r6, loc_5cc
000005ca: JMP loc_5a9
000005cc: RETVAL 0

put_bank: ; (ptr as r0:1, loc as ACC)
  mov r2:3, [PC_HIGH + r0:1]
  mov r0:1, 0xa0
  xchg ACC, r1

  mov ACC, r2
  mov SRC, r0:1
  mov [BANK + SRC]
  INC r1
  
  mov ACC, r3
  mov SRC, r0:1
  mov [BANK + SRC]
  INC r1

  ; BANK[0xa0 | loc] = *(PC_HIGH + ptr)
  ; ...
  RETVAL 0

init_bank:
  mov r4:5, 0xa6
  mov ACC, r4
  call put_bank
  inc r4

  mov ACC, r4
  call put_bank
  inc r4

  mov ACC, r4
  call put_bank
  retval 0
  
;0000061c: MOV r2:3, [PC_HIGH + r0:1]
;0000061d: MOV r4:5, 0xa6
;0000061f: MOV SRC, r4:5
;00000620: MOV ACC, r2
;00000621: MOV [BANK + SRC], ACC
;
;00000622: MOV r4:5, 0xa7
;00000624: MOV SRC, r4:5
;00000625: MOV ACC, r3
;00000626: MOV [BANK + SRC], ACC
;
;00000627: INC r1
;00000628: MOV r2:3, [PC_HIGH + r0:1]
;00000629: MOV r4:5, 0xa8
;0000062b: MOV SRC, r4:5
;0000062c: MOV ACC, r2
;0000062d: MOV [BANK + SRC], ACC
;
;0000062e: MOV r4:5, 0xa9
;00000630: MOV SRC, r4:5
;00000631: MOV ACC, r3
;00000632: MOV [BANK + SRC], ACC
;
;00000633: INC r1
;00000634: MOV r2:3, [PC_HIGH + r0:1]
;00000635: MOV r4:5, 0xaa
;00000637: MOV SRC, r4:5
;00000638: MOV ACC, r2
;00000639: MOV [BANK + SRC], ACC
;
;0000063a: MOV r4:5, 0xab
;0000063c: MOV SRC, r4:5
;0000063d: MOV ACC, r3
;0000063e: MOV [BANK + SRC], ACC
;0000063f: RETVAL 0

read_bank: ; Reads 6 nibbles
00000640: GETCHAR
00000641: MOV r0:1, 0xa0
00000643: MOV SRC, r0:1
00000644: MOV [BANK + SRC], ACC
00000645: GETCHAR
00000646: MOV r0:1, 0xa1
00000648: MOV SRC, r0:1
00000649: MOV [BANK + SRC], ACC
0000064a: GETCHAR
0000064b: MOV r0:1, 0xa2
0000064d: MOV SRC, r0:1
0000064e: MOV [BANK + SRC], ACC
0000064f: GETCHAR
00000650: MOV r0:1, 0xa3
00000652: MOV SRC, r0:1
00000653: MOV [BANK + SRC], ACC
00000654: GETCHAR
00000655: MOV r0:1, 0xa4
00000657: MOV SRC, r0:1
00000658: MOV [BANK + SRC], ACC
00000659: GETCHAR
0000065a: MOV r0:1, 0xa5
0000065c: MOV SRC, r0:1
0000065d: MOV [BANK + SRC], ACC
0000065e: RETVAL 0


welcome:
00000700: db "welcome, enter the flag:", 0

correct:
00000719: db "correct flag!", 0

incorrect:
00000727: db "incorrect flag :(", 0

puts:
00000739: MOV r2:3, [PC_HIGH + r0:1]
0000073a: MOV ACC, r2
0000073b: JNZ loc_740
0000073d: MOV ACC, r3
0000073e: JZ loc_74b
00000740: MOV ACC, r2
00000741: PUTCHAR
00000742: MOV ACC, r3
00000743: PUTCHAR
00000744: INC_JZ r1, loc_748
00000746: JMP loc_749
00000748: INC r0
00000749: JMP puts
0000074b: MOV r2:3, 10
0000074d: MOV ACC, r2
0000074e: PUTCHAR
0000074f: MOV ACC, r3
00000750: PUTCHAR
00000751: RETVAL 0

00000800: JMP loc_4
00000802: JMP loc_27
00000804: JMP loc_43
00000806: JMP loc_50
00000808: JMP loc_63
0000080a: JMP loc_71
0000080c: JMP loc_78
0000080e: JMP loc_8e
00000810: JMP PC_HIGH + r0:1

xor_op:
00000811: MOV r2:3, 11

00000813: MOV ACC, 0
00000814: XCHG ACC, r0
00000815: RAL ACC
00000816: XCHG ACC, r0

00000817: INC r3
00000818: XCHG ACC, r3
00000819: JZ loc_827
0000081b: XCHG ACC, r3

0000081c: RAR ACC
0000081d: XCHG ACC, r2

0000081e: MOV ACC, 0
0000081f: XCHG ACC, r1
00000820: RAL ACC
00000821: XCHG ACC, r1
00000822: RAR ACC
00000823: ADD ACC, r2
00000824: RAL ACC

00000825: JMP loc_813

00000827: RETVAL 0
